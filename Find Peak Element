Question-
A peak element is an element that is strictly greater than its neighbors.
Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.
You may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.
You must write an algorithm that runs in O(log n) time.

Solution-
class Solution {
  public int findPeakElement(int[] nums) {
    if (nums.length == 1) return 0;
    if (nums[0] > nums[1]) return 0;
    else if (nums[nums.length - 1] > nums[nums.length - 2]) return nums.length - 1;

    int l = 0, h = nums.length - 1;
    int ans = 0;
    while (l <= h) {
      int m = l + (h - l) / 2;
      if (m - 1 >= 0 && m + 1 < nums.length) {
        if (nums[m] > nums[m - 1] && nums[m] > nums[m + 1]) {
          return m;
        }
      }
      if (m - 1 >= 0 && nums[m - 1] > nums[m]) { 
        h = m - 1;
      } else {
        ans = l; 
        l = m + 1;
      }
    }
    return ans;
  }
}
