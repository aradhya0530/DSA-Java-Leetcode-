Question-
There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. 
More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:
There are no self-edges (graph[u] does not contain u).
There are no parallel edges (graph[u] does not contain duplicate values).
If v is in graph[u], then u is in graph[v] (the graph is undirected).
The graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.
A graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.

Return true if and only if it is bipartite.

Solution-
class Solution {
    public boolean isBipartite(int[][] graph) {
        int node = graph.length, edge = graph[0].length;
        int[] colors = new int[node];

        
        for (int i = 0; i < node; i++) {
            if (colors[i] == 0 && !dfs(graph, colors, i, 1)) {
                return false;
            }
        }
        return true;
    }

    private boolean dfs(int[][] graph, int[] colors, int curr, int color) {
        colors[curr] = color;
        for (int neigh : graph[curr]) {
           
            if (colors[neigh] == colors[curr]) {
                return false;
            }
            
            if (colors[neigh] == 0 && !dfs(graph, colors, neigh, -color)) {
                return false;
            }
        }
        return true;
    }
}
